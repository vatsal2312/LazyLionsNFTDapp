// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

model Account {
  id                 String    @id @default (cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String ?
  accessToken        String ?
  accessTokenExpires DateTime ?
  createdAt          DateTime  @default (now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default (cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default (now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default (cuid())
  name          String ?
  email         String ?   @unique
  emailVerified DateTime ?
  image         String ?
  createdAt     DateTime  @default (now())
  updatedAt     DateTime  @updatedAt

  willDonate    Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  twitterChecks TwitterChecks[]
  discordChecks DiscordChecks[]
  ethereumAccount EthereumAccount ?
  twitterProfile TwitterProfile ?
  discordProfile DiscordProfile ?
}

model VerificationRequest {
  id         String   @id @default (cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default (now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model EthereumAccount {
  id     Int  @id @default(autoincrement())
  address String
  message String
  signature String
  linkedAt  DateTime   @default (now())

  user   User @relation(fields: [userId], references: [id])
  userId String
}

model TwitterProfile {
  id Int @id
  screen_name String
  description String
  followers_count Int
  friends_count Int
  favourites_count Int
  statuses_count Int
  profile_image_url String
  
  user   User? @relation(fields: [userId], references: [id])
  userId String?
}

model TwitterChecks {
  id         String   @id @default (cuid())
  profilePictureUrl String
  description String
  name String
  
  containsEmojii Boolean
  hasNFTAsPFP Boolean

  // NFT id.
  pfpMatch Int ?

  checkedAt  DateTime
  
  user   User ? @relation(fields: [userId], references: [id])
  userId String ?
}

model DiscordProfile {
  id Int @id @default(autoincrement())
  discordId String
  username String
  image_url String
  
  user   User? @relation(fields: [userId], references: [id])
  userId String?
}

model DiscordChecks {
  id Int @id @default (autoincrement())
  diamondPaws Boolean @default (false)
  
  checkedAt  DateTime

  user   User ? @relation(fields: [userId], references: [id])
  userId String ?
}